@using FCSE_IT_Project.Models;
@model Tuple<IEnumerable<SelectListItem>, Order>

@{
    ViewBag.Title = "AddProductsToOrder";
}

<script src="~/Scripts/jquery-3.4.1.js">

</script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script type="text/javascript">
    var products = [];
    var orderId = @Model.Item2.Id;
    $(document).ready(function () {
        getProducts();
        FinalTotal();
        $("#Product").val(0);
        $("#Product").change(function () {
            var productId = $("#Product").val();
            GetProductPrice(productId);
        });

        $("input[type=text]").change(function () {
            CalculateSubTotal();
        });

        $("#btnAddProduct").click(function () {
            addToTheProductList();
        });

        $("#btnSaveOrder").click(function () {
            saveOrder();
        });

    });

    function addToTheProductList() {
        var unitPrice = parseInt($("#txtProductPrice").val());
        var quantity = parseInt($("#txtProductQuantity").val());
        var productId = parseInt($("#Product").val());
        var productName = $("#Product option:selected").text();
        var total = unitPrice * quantity;
        var flag = 0;
        var tmp = 0;


        const product = {
            orderID: orderId,
            id: productId,
            name: productName,
            quant: quantity,
            price: total
        };

        console.log(products);
        for (var i = 0; i < products.length; i++) {
            debugger;
            if (product.name == products[i].name) {
                flag = 1;
                tmp = i;
            }
        }

        if (flag == 1) {
            products[tmp].quantity += quantity;
            products[tmp].price += total;
        } else if (flag == 0) {
            product.quantity = quantity;
            products.push(product);
            debugger;
        }
        printProducts(products);
        FinalTotal();
        ResetItem();
    }

    function printProducts(products) {
        $("#tblProducts tbody").empty();
        var tblProducts = $("#tblProducts");
        for (var i = 0; i < products.length; i++) {
            var productList = "<tr class='products-list'><td hidden>" + products[i].id + "</td><td id='nameOfProduct'>" + products[i].name + "</td><td id='quantityOfProduct'>" + products[i].quantity + "</td><td id='totalPrice'>" + products[i].price
                + "</td><td><input type='button' value='Избриши' name='remove' class='btn btn-danger' onclick='RemoveProduct(this)'></td></tr>";
            debugger;
            tblProducts.append(productList);
        }
    }

    function getProducts() {
        var tableTmpProduct = $("#tblProducts").find("tr:gt(0)");

        $.each(tableTmpProduct, function () {
            var product = {};
            product.OrderId = orderId;
            product.id = parseInt($(this).find("td:eq(0)").text());
            product.name = $(this).find("td:eq(1)").text();
            product.quantity = parseInt($(this).find("td:eq(2)").text());
            product.price = parseInt($(this).find("td:eq(3)").text());
            products.push(product);
        });

    }

    function RemoveProduct(productId) {
        bootbox.prompt({
            title: "Внесете лозинка за да ја избришете нарачката!",
            inputType: 'password',
            callback: function (result) {
                console.log(result);
                var password = result;
                if (password == "izbrisi") {
                    $(productId).closest('tr').remove();
                    RemoveProductFromProductsList(productId);
                } else {
                    swal("Грешка", "Лозинката не се совпаѓа, обидете се повторно", "error");
                }
            }
        });

    }
    function RemoveProductFromProductsList(productId) {
        var currentRow = $(productId).closest('tr');
        var productID = parseInt(currentRow.find("td:eq(0)").text());
        var productName = currentRow.find("td:eq(1)").text();
        var quantity = parseInt(currentRow.find("td:eq(2)").text());
        var total = parseInt(currentRow.find("td:eq(3)").text());

        const product = {
            orderID: orderId,
            id: productID,
            name: productName,
            quant: quantity,
            price: total,
            quantity: quantity
        };

        var newArray = pom(products, product);

        function pom(products, product) {
            return products.filter(function (produkt) {
                return produkt.id != product.id;
            });
        }
        products = newArray;
        console.log(products);
        printProducts(products);
        FinalTotal();
        ResetItem();
    }


    function RemoveProductSimple(productId) {
        $(productId).closest('tr').remove();
        debugger;
    }

    function ResetItem() {
        $("#txtProductPrice").val('0.00');
        $("#txtProductQuantity").val('0');
        $("#Product").val(0);
        $("#txtProductTotal").val('0.00');
    }

    function confirmOrder() {
        swal({
            title: "Нарачката е успешно потврдена!",
            text: " Може да се вратите кон другите нарачки",
            icon: "success",
            button: "Излези",
        });
        var listOfTmpProducts = [];
        var tableTmpProduct = $("#tblProducts").find("tr:gt(0)");

        $.each(tableTmpProduct, function () {
            var tmpProduct = {};
            tmpProduct.OrderId = orderId;
            tmpProduct.id = parseInt($(this).find("td:eq(0)").text());
            tmpProduct.name = $(this).find("td:eq(1)").text();
            tmpProduct.quantity = parseInt($(this).find("td:eq(2)").text());
            tmpProduct.price = parseInt($(this).find("td:eq(3)").text());
            listOfTmpProducts.push(tmpProduct);
        });
        console.log(listOfTmpProducts);
        var dataObject = {};
        dataObject.products = listOfTmpProducts;
        dataObject.orderId = orderId;
        console.log(dataObject.products);
        console.log(dataObject);

        $.ajax({
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            type: "POST",
            url: "/Orders/AddProductsToOrder",
            data: JSON.stringify(dataObject)
        });
    }

    function saveOrder() {

        bootbox.prompt({
            title: "Внесете лозинка за да ја потврдите нарачката",
            inputType: 'password',
            callback: function (result) {
                debugger;
                var password = result;
                if (password == "1234") {
                    confirmOrder();
                } else {
                    swal("Грешка", "Лозинката не се совпаѓа, обидете се повторно", "error");
                }
            }
        });
    }

 

    function CalculateSubTotal() {
        var unitPrice = $("#txtProductPrice").val();
        var quantity = $("#txtProductQuantity").val();

        var total = unitPrice * quantity;
        $("#txtProductTotal").val(parseFloat(total).toFixed(2));
    }

    function FinalTotal() {
        $("#txtFinalTotal").val("0");
        var finalTotal = 0;
        $("#tblProducts").find("tr:gt(0)").each(function () {
            var total = parseInt($(this).find("td:eq(3)").text());

            finalTotal += total;
        });

        $("#txtFinalTotal").val(finalTotal);
    }

    function GetProductPrice(productId) {
        $.ajax({
            async: true,
            type: 'GET',
            dataType: 'JSON',
            contentType: 'application/json; charset=utf-8',
            data: { productId: productId },
            url: '/orders/getProductPrice',
            success: function (data) {
                $("#txtProductPrice").val(parseFloat(data).toFixed(2));
            },
            error: function () {
                console.log("Има проблем при земање на цената на конкретниот продукт!");
            }
        });
    }

</script>

<style>
    fieldset {
        border: 1px solid #ddd !important;
        margin: 0;
        xmin-width: 0;
        padding: 10px;
        position: relative;
        border-radius: 4px;
        background-color: #f5f5f5;
        padding-left: 10px !important;
    }

    legend {
        font-size: 14px;
        font-weight: bold;
        margin-bottom: 0;
        width: 35%;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px 5px 5px 10px;
        background-color: #ffffff;
    }

    .btn-ordinary {
        color: #fff;
        background-color: #337ab7;
        border-color: #2e6da4;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        border: 1px solid transparent;
        padding: 8px 12px;
        font-size: 14px;
        border-radius: 10px;
    }

        .btn-ordinary:hover {
            color: #fff;
            background-color: #286090;
            border-color: #204d74;
            text-decoration: none;
        }
</style>

<h2>Додадете продукти во вашата нарачка</h2>
<br />
<fieldset>
    <legend>
        Нарачка :
    </legend>
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Item2.Name, new { @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    Вкупно :
                    <input type="text" value="0" name="finalTotal" readonly="readonly" id="txtFinalTotal" class="form-control" />
                </div>
            </div>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend>
        Продукти :
    </legend>
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    Име на продуктот :
                    @Html.DropDownList("Product", new SelectList(Model.Item1, "Value", "Text"),
                                        new { @class = "form-control" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    Цена на продуктот :
                    <input type="text" readonly="readonly" id="txtProductPrice" value="0.00" name="ProductPrice" class="form-control" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    Количина од продуктот :
                    <input type="text" id="txtProductQuantity" value="0" name="ProductPrice" class="form-control" />

                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    Вкупно :
                    <input type="text" readonly="readonly" id="txtProductTotal" value="0.00" name="ProductPrice" class="form-control" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <input type="button" style="margin-top: 10px" id="btnAddProduct" name="addProductToList" value="Додади продукт" class="btn btn-success" />
                </div>
            </div>
        </div>
    </div>
</fieldset>
<fieldset>
    <legend>
        Продукти во нарачката :
    </legend>
    <table style="width: 100%" id="tblProducts">
        <thead>
        <th hidden>
            Product Id
        </th>
        <th>
            Име
        </th>
        <th>
            Количина
        </th>
        <th>
            Цена
        </th>
        <th>
        </th>
        </thead>
        <tbody>
            @foreach (var product in ViewBag.tmpProducts)
            {
                <tr class="products-list">
                    <td hidden>@product.id</td>
                    <td id="nameOfProduct">@product.name</td>
                    <td id="quantityOfProduct">@product.quantity</td>
                    <td id="totalPrice">@product.price</td>
                    <td><input type='button' value='Избриши' name='remove' class='btn btn-danger' onclick='RemoveProduct(this)'></td>
                </tr>
            }
        </tbody>
    </table>
</fieldset>
<br/>
<div>
    <input style="margin-top: 10px" type="submit" value="Зачувај нарачка" name="save" id="btnSaveOrder" class="btn-ordinary" />
</div>
<br />
<div>
    @Html.ActionLink("Назад кон листата на нарачки", "Index", "Orders", new { @class = "btn-ordinary" })
</div>
